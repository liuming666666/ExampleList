{"version":3,"sources":["../../../../../../../assets/cases/02_ui/05_scrollView/ListView/assets/cases/02_ui/05_scrollView/ListView/ListViewCtrl.js"],"names":["cc","Class","extends","Component","properties","itemTemplate","default","type","Node","scrollView","ScrollView","spawnCount","totalCount","spacing","bufferZone","lblScrollEvent","Label","btnAddItem","Button","btnRemoveItem","btnJumpToPosition","lblJumpPosition","lblTotalItems","onLoad","content","items","initialize","updateTimer","updateInterval","lastContentPosY","height","i","item","instantiate","addChild","setPosition","getComponent","updateItem","push","getPositionInView","worldPos","parent","convertToWorldSpaceAR","position","viewPos","node","convertToNodeSpaceAR","update","dt","buffer","isDown","y","offset","length","setPositionY","itemId","itemID","textKey","scrollEvent","sender","event","string","addItem","removeItem","error","scrollToFixedPosition","scrollToOffset","p"],"mappings":"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","file":"ListViewCtrl.js","sourceRoot":"../../../../../../../assets/cases/02_ui/05_scrollView/ListView","sourcesContent":["cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        itemTemplate: { // item template to instantiate other items\n            default: null,\n            type: cc.Node\n        },\n        scrollView: {\n        \tdefault: null,\n        \ttype: cc.ScrollView\n        },\n        spawnCount: 0, // how many items we actually spawn\n        totalCount: 0, // how many items we need for the whole list\n        spacing: 0, // space between each item\n        bufferZone: 0, // when item is away from bufferZone, we relocate it\n        lblScrollEvent: cc.Label,\n        btnAddItem: cc.Button,\n        btnRemoveItem: cc.Button,\n        btnJumpToPosition: cc.Button,\n        lblJumpPosition: cc.Label,\n        lblTotalItems: cc.Label,\n    },\n\n    // use this for initialization\n    onLoad: function () {\n    \tthis.content = this.scrollView.content;\n        this.items = []; // array to store spawned items\n    \tthis.initialize();\n        this.updateTimer = 0;\n        this.updateInterval = 0.2;\n        this.lastContentPosY = 0; // use this variable to detect if we are scrolling up or down\n    },\n\n    initialize: function () {\n        this.content.height = this.totalCount * (this.itemTemplate.height + this.spacing) + this.spacing; // get total content height\n    \tfor (let i = 0; i < this.spawnCount; ++i) { // spawn items, we only need to do this once\n    \t\tlet item = cc.instantiate(this.itemTemplate);\n    \t\tthis.content.addChild(item);\n    \t\titem.setPosition(0, -item.height * (0.5 + i) - this.spacing * (i + 1));\n    \t\titem.getComponent('Item').updateItem(i, i);\n            this.items.push(item);\n    \t}\n    },\n\n    getPositionInView: function (item) { // get item position in scrollview's node space\n        let worldPos = item.parent.convertToWorldSpaceAR(item.position);\n        let viewPos = this.scrollView.node.convertToNodeSpaceAR(worldPos);\n        return viewPos;\n    },\n\n    update: function(dt) {\n        this.updateTimer += dt;\n        if (this.updateTimer < this.updateInterval) return; // we don't need to do the math every frame\n        this.updateTimer = 0;\n        let items = this.items;\n        let buffer = this.bufferZone;\n        let isDown = this.scrollView.content.y < this.lastContentPosY; // scrolling direction\n        let offset = (this.itemTemplate.height + this.spacing) * items.length;\n        for (let i = 0; i < items.length; ++i) {\n            let viewPos = this.getPositionInView(items[i]);\n            if (isDown) {\n                // if away from buffer zone and not reaching top of content\n                if (viewPos.y < -buffer && items[i].y + offset < 0) {\n                    items[i].setPositionY(items[i].y + offset );\n                    let item = items[i].getComponent('Item');\n                    let itemId = item.itemID - items.length; // update item id\n                    item.updateItem(i, itemId);\n                }\n            } else {\n                // if away from buffer zone and not reaching bottom of content\n                if (viewPos.y > buffer && items[i].y - offset > -this.content.height) {\n                    items[i].setPositionY(items[i].y - offset );\n                    let item = items[i].getComponent('Item');\n                    let itemId = item.itemID + items.length;\n                    item.updateItem(i, itemId);\n                }\n            }\n        }\n        // update lastContentPosY\n        this.lastContentPosY = this.scrollView.content.y;\n        this.lblTotalItems.textKey = \"Total Items: \" + this.totalCount;\n    },\n\n    scrollEvent: function(sender, event) {\n        switch(event) {\n            case 0: \n               this.lblScrollEvent.string = \"Scroll to Top\"; \n               break;\n            case 1: \n               this.lblScrollEvent.string = \"Scroll to Bottom\"; \n               break;\n            case 2: \n               this.lblScrollEvent.string = \"Scroll to Left\"; \n               break;\n            case 3: \n               this.lblScrollEvent.string = \"Scroll to Right\"; \n               break;\n            case 4: \n               this.lblScrollEvent.string = \"Scrolling\"; \n               break;\n            case 5: \n               this.lblScrollEvent.string = \"Bounce Top\"; \n               break;\n            case 6: \n               this.lblScrollEvent.string = \"Bounce bottom\"; \n               break;\n            case 7: \n               this.lblScrollEvent.string = \"Bounce left\"; \n               break;\n            case 8: \n               this.lblScrollEvent.string = \"Bounce right\"; \n               break;\n            case 9: \n               this.lblScrollEvent.string = \"Auto scroll ended\"; \n               break;\n        }\n    },\n\n    addItem: function() {\n        this.content.height = (this.totalCount + 1) * (this.itemTemplate.height + this.spacing) + this.spacing; // get total content height\n        this.totalCount = this.totalCount + 1;\n    },\n\n    removeItem: function() {\n        if (this.totalCount - 1 < 30) {\n            cc.error(\"can't remove item less than 30!\");\n            return;\n        }\n\n        this.content.height = (this.totalCount - 1) * (this.itemTemplate.height + this.spacing) + this.spacing; // get total content height\n        this.totalCount = this.totalCount - 1;\n    },\n\n    scrollToFixedPosition: function () {\n        this.scrollView.scrollToOffset(cc.p(0, 500), 2);\n    }\n});\n"]}