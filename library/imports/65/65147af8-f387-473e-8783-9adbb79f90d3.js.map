{"version":3,"sources":["../../../../../../assets/cases/graphics/demo/assets/cases/graphics/demo/sine-waves.js"],"names":["PI180","Math","PI","PI2","HALFPI","Ease","linear","percent","amplitude","sinein","sin","sineout","sineinout","EaseEnumOptins","k","Enum","cc","Waves","sine","x","sign","isNaN","square","sawtooth","floor","triangle","abs","WavesEnumOptins","Wave","Class","name","properties","timeModifier","wavelength","segmentLength","lineWidth","waveType","default","type","easeType","strokeColor","color","SineWaves","extends","Component","speed","waves","onLoad","director","setClearColor","hexToColor","time","ctx","getComponent","Graphics","lineCap","LineCap","BUTT","lineJoin","LineJoin","ROUND","i","l","length","waveFn","bind","easeFn","onDisable","Color","BLACK","update","dt","clear","yAxis","visibleRect","height","width","waveWidth","waveLeft","drawWave","options","moveTo","lineTo","point","getPoint","y","stroke","position","module","exports"],"mappings":"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","file":"sine-waves.js","sourceRoot":"../../../../../../assets/cases/graphics/demo","sourcesContent":["// https://github.com/isuttell/sine-waves\n\n/************************************************\n * @file  Constants\n * @author  Isaac Suttell\n ************************************************/\n \n/**\n * For radian conversion\n *\n * @constant\n * @type    {Number}\n */\nvar PI180 = Math.PI / 180;\n\n/**\n * Twice of PI\n *\n * @constant\n * @type {Number}\n */\nvar PI2 = Math.PI * 2;\n\n/**\n * Half of PI\n *\n * @constant\n * @type {Number}\n */\nvar HALFPI = Math.PI / 2;\n\n/************************************************\n * @file  Left to right easing functions\n * @author Isaac Suttell\n ************************************************/\n\n/**\n * This holds all of the easing objects and can be added to by the user\n *\n * @type    {Object}\n */\nvar Ease = {};\n\n/**\n * Do not apply any easing\n *\n * @param  {Number} percent   where in the line are we?\n * @param  {Number} amplitude the current strength\n *\n * @return {Number}           the new strength\n */\nEase.linear = function(percent, amplitude) {\n  return amplitude;\n};\n\n/**\n * Easing function to control how string each wave is from\n * left to right\n *\n * @param  {Number} percent   where in the line are we?\n * @param  {Number} amplitude the current strength\n *\n * @return {Number}           the new strength\n */\nEase.sinein = function(percent, amplitude) {\n  return amplitude * (Math.sin(percent * Math.PI - HALFPI) + 1) * 0.5;\n};\n\n/**\n * Easing function to control how string each wave is from\n * left to right\n *\n * @param  {Number} percent   where in the line are we?\n * @param  {Number} amplitude the current strength\n *\n * @return {Number}           the new strength\n */\nEase.sineout = function(percent, amplitude) {\n  return amplitude * (Math.sin(percent * Math.PI + HALFPI) + 1) * 0.5;\n};\n\n/**\n * Easing function to control how string each wave is from\n * left to right\n *\n * @param  {Number} percent   where in the line are we?\n * @param  {Number} amplitude the current strength\n *\n * @return {Number}           the new strength\n */\nEase.sineinout = function(percent, amplitude) {\n  return amplitude * (Math.sin(percent * PI2 - HALFPI) + 1) * 0.5;\n};\n\nlet EaseEnumOptins = {};\nfor (let k in Ease) {\n    EaseEnumOptins[k] = -1;\n}\nEase.Enum = cc.Enum(EaseEnumOptins);\n\n/************************************************\n * @file  Sine Wave functions\n * @author Isaac Suttell\n ************************************************/\n\n/**\n * Holds the different types of waves\n *\n * @type    {Object}\n */\nvar Waves = {};\n\n/**\n * Default Sine Waves\n *\n * @param    {Number}    x\n */\nWaves.sine = function(x) {\n  return Math.sin(x);\n};\n\n\n/**\n * Sign polyfill\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n *\n * @param     {Number}    x\n *\n * @return    {Number}\n */\nWaves.sign = function(x) {\n  x = +x; // convert to a number\n  if (x === 0 || isNaN(x)) {\n    return x;\n  }\n  return x > 0 ? 1 : -1;\n};\n\n/**\n * Square Waves\n *\n * @param    {Number}    x\n */\nWaves.square = function(x) {\n  return Waves.sign(Math.sin(x * PI2));\n};\n\n/**\n * Sawtooth Waves\n *\n * @param    {Number}    x\n */\nWaves.sawtooth = function(x) {\n  return (x - Math.floor(x + 0.5)) * 2;\n};\n\n/**\n * Triangle Waves\n *\n * @param    {Number}    x\n */\nWaves.triangle = function(x) {\n  return Math.abs(Waves.sawtooth(x));\n};\n\nlet WavesEnumOptins = {};\nfor (let k in Waves) {\n    WavesEnumOptins[k] = -1;\n}\nWaves.Enum = cc.Enum(WavesEnumOptins);\n\n\nlet Wave = cc.Class({\n    name: 'Wave',\n\n    properties: {\n        timeModifier: 1,\n        amplitude: 50,\n        wavelength: 50,\n        segmentLength: 10,\n        lineWidth: 1,\n        waveType: {\n            default: Waves.Enum.sine,\n            type: Waves.Enum\n        },\n        easeType: {\n            default: Ease.Enum.sinein,\n            type: Ease.Enum\n        },\n        strokeColor: cc.color(255, 255, 255, 100)\n    }\n});\n\nlet SineWaves = cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        speed: 1,\n\n        waves: {\n            default: function () {\n                return [new Wave()];\n            },\n            type: [Wave]\n        }\n    },\n\n    // use this for initialization\n    onLoad: function () {\n        if (cc.director.setClearColor) {\n            cc.director.setClearColor( cc.hexToColor('#01aaff') );\n        }\n\n        this.time = 0;\n\n        this.ctx = this.getComponent(cc.Graphics);\n        this.ctx.lineCap = cc.Graphics.LineCap.BUTT;\n        this.ctx.lineJoin = cc.Graphics.LineJoin.ROUND;\n\n        let waves = this.waves;\n        for (let i = 0, l = waves.length; i < l; i++) {\n            waves[i].waveFn = Waves[Waves.Enum[waves[i].waveType]].bind(Waves);\n            waves[i].easeFn = Ease[Ease.Enum[waves[i].easeType]].bind(Ease);\n        }\n    },\n    \n    onDisable: function () {\n        if (cc.director.setClearColor) {\n            cc.director.setClearColor( cc.Color.BLACK );\n        }\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function (dt) {\n        this.ctx.clear();\n\n        this.yAxis = cc.visibleRect.height/2;\n        this.width = cc.visibleRect.width;\n\n        this.waveWidth = this.width * 0.95;\n        this.waveLeft = this.width * 0.25;\n\n        this.time += dt;\n\n        // Draw each line\n        let waves = this.waves;\n        for (let i = 0, l = waves.length; i < l; i++) {\n            var timeModifier = this.waves[i].timeModifier || 1;\n            this.drawWave(this.time * timeModifier, waves[i]);\n        }\n    },\n\n    /**\n     * Draws one line on the canvas\n     *\n     * @param  {Number} time    current internal clock time\n     * @param  {Object} options wave options\n     */\n    drawWave: function (time, options) {\n        // Styles\n        this.ctx.lineWidth = options.lineWidth;\n        this.ctx.strokeColor = options.strokeColor;\n\n        // Starting Line\n        this.ctx.moveTo(0, this.yAxis);\n        this.ctx.lineTo(this.waveLeft, this.yAxis);\n\n        for (let i = 0; i < this.waveWidth; i += options.segmentLength) {\n            // Calculate where the next point is\n            let point = this.getPoint(time, i, options);\n\n            // Draw to it\n            this.ctx.lineTo(point.x, point.y);\n        }\n\n        // Ending Line\n        this.ctx.lineTo(this.width, this.yAxis);\n\n        // Stroke it\n        this.ctx.stroke();\n    },\n\n    /**\n     * Calculate the x, y coordinates of a point in a sine wave\n     *\n     * @param  {Number} time     Internal time index\n     * @param  {Number} position Pixels x poistion\n     * @param  {Object} options  Wave options\n     *\n     * @return {Object}          {x, y}\n     */\n    getPoint: function(time, position, options) {\n        var x = (time * this.speed) + (-this.yAxis + position) / options.wavelength;\n        var y = options.waveFn(x);\n\n        // Left and Right Sine Easing\n        var amplitude = options.easeFn(position / this.waveWidth, options.amplitude);\n\n        x = position + this.waveLeft;\n        y = amplitude * y + this.yAxis;\n\n        return {\n            x: x,\n            y: y\n        };\n    }\n});\n\nmodule.exports = SineWaves;\n"]}