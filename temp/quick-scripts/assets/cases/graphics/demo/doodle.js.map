{"version":3,"sources":["doodle.js"],"names":["cc","Class","extends","Component","properties","reactivity","debug","onLoad","director","setClearColor","hexToColor","graphics","getComponent","Graphics","nodes","ripples","mouse","x","y","color","r","g","b","a","cycle","createBezierNodes","eventManager","addListener","event","EventListener","TOUCH_ONE_BY_ONE","onTouchBegan","touch","getLocation","addRipple","onTouchEnded","input","node","onDisable","Color","BLACK","updateColorCycle","quantity","len","theta","Math","PI","winSize","width","cos","height","sin","push","vx","vy","lastX","lastY","min","max","disturb","orbit","angle","random","speed","length","fade","update","dt","ease","friction","index","ripple","splice","forEach","call","render","currentIndex","nextIndex","xc","yc","clear","strokeColor","fillColor","lineWidth","moveTo","N","quadraticCurveTo","fill","stroke","lineCap","LineCap","ROUND","lineJoin","LineJoin","lineTo","circle"],"mappings":"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","file":"doodle.js","sourceRoot":"../../../../../../assets/cases/graphics/demo","sourcesContent":["// http://codepen.io/Francext/pen/ojwdJ\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        reactivity: 0.5, \n        debug: false\n    },\n\n    // use this for initialization\n    onLoad: function () {\n        if (cc.director.setClearColor) {\n            cc.director.setClearColor( cc.hexToColor('#d1f1ff') );\n        }\n\n        this.graphics = this.getComponent(cc.Graphics);\n\n        this.nodes = [];\n        this.ripples = [];\n        this.mouse = { x: 0, y: 0 };\n        this.color = { r: 0, g: 0, b: 0, a: 255 };\n        this.cycle = 90;\n\n        this.createBezierNodes();\n\n        cc.eventManager.addListener({\n            event: cc.EventListener.TOUCH_ONE_BY_ONE,\n            onTouchBegan: (touch, event) => {\n                this.mouse = touch.getLocation();\n                this.addRipple();\n                return true;\n            },\n            onTouchEnded: () => {\n                this.input = false;\n            }\n        }, this.node);\n    },\n    \n    onDisable: function () {\n        if (cc.director.setClearColor) {\n            cc.director.setClearColor( cc.Color.BLACK );\n        }\n    },\n\n    createBezierNodes: function () {\n    \n        this.updateColorCycle();\n    \n        for(var quantity = 0, len = 6; quantity < len; quantity++) {\n                \n            var theta = Math.PI * 2 * quantity / len;\n            \n            var x = cc.winSize.width * 0.5 + 0 * Math.cos(theta);\n            var y = cc.winSize.height * 0.5 + 0 * Math.sin(theta);\n            \n            this.nodes.push({\n                    \n                x: x,\n                y: y,\n                vx: 0,\n                vy: 0,\n                \n                lastX: x,\n                lastY: y,\n                \n                min: 150,\n                max: 250,\n                disturb: 150,\n                \n                orbit: 20,\n                angle: Math.random() * Math.PI * 2,\n                speed: 0.05 + Math.random() * 0.05,\n                                                \n                theta: theta\n            \n            });\n                    \n        }\n    },\n\n    addRipple: function() {\n\n        this.input = true;\n        \n        if(this.ripples.length === 0) {\n    \n            this.updateColorCycle();\n    \n            this.ripples.push({\n        \n                x: this.mouse.x,\n                y: this.mouse.y,\n            \n                reactivity: 0,\n                fade: 1.0\n        \n            });\n            \n        }\n    \n    },\n    \n    updateColorCycle: function () {\n    \n        this.cycle = Math.min(this.cycle + this.reactivity + 0.3, 100) !== 100 ? this.cycle += this.reactivity + 0.3 : 0;\n        \n        let color = this.color;\n        color.r = ~~(Math.sin(0.3 * this.cycle + 0) * 127 + 128);\n        color.g = ~~(Math.sin(0.3 * this.cycle + 2) * 127 + 128);\n        color.b = ~~( Math.sin(0.3 * this.cycle + 4) * 127 + 128);\n    \n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function (dt) {\n        let nodes = this.nodes;\n        let ripples = this.ripples;\n\n        var ease = 0.01, friction = 0.98;\n        \n        for(var index = 0; index < ripples.length; index++) {\n        \n            var ripple = ripples[index];\n        \n            ripple.reactivity += 5;\n            ripple.fade -= 0.05;\n            \n            if(ripple.fade <= 0.0)\n            \n                ripples.splice(index, 1);\n                \n        }\n    \n        [].forEach.call(nodes, (node, index) => {\n                        \n            node.lastX += (cc.winSize.width * 0.5 + node.disturb * Math.cos(node.theta) - node.lastX) * 0.08;\n            node.lastY += (cc.winSize.height * 0.5 + node.disturb * Math.sin(node.theta) - node.lastY) * 0.08;\n            \n            // Motion\n            node.x += ((node.lastX + Math.cos(node.angle) * node.orbit) - node.x) * 0.08;\n            node.y += ((node.lastY + Math.sin(node.angle) * node.orbit) - node.y) * 0.08;\n        \n            // Ease\n            node.vx += (node.min - node.disturb) * ease;\n        \n            // Friction\n            node.vx *= friction;\n            \n            node.disturb += node.vx;\n            \n            if(this.input)\n                                \n                node.disturb += (node.max - node.disturb) * this.reactivity;\n                                    \n            node.angle += node.speed;\n            \n        });\n\n        this.render();\n    },\n\n    render: function () {\n        let nodes = this.nodes;\n        let ripples = this.ripples;\n        let graphics = this.graphics;\n        let color = this.color;\n    \n        var currentIndex, nextIndex, xc, yc;\n\n        color.a = this.debug ? 255 : 255/2;\n\n        graphics.clear();\n                        \n        [].forEach.call(nodes, (node, index) => {\n    \n            currentIndex = nodes[nodes.length - 1];\n            nextIndex = nodes[0];\n                \n            xc = currentIndex.x + (nextIndex.x - currentIndex.x) * 0.5;\n            yc = currentIndex.y + (nextIndex.y - currentIndex.y) * 0.5;\n        \n            let strokeColor = cc.hexToColor(this.debug ? '#a9a9a9' : '#e5e5e5');\n            strokeColor.a = this.debug ? 255 : 255/2;\n            graphics.strokeColor = strokeColor;\n\n            graphics.fillColor = color;\n            graphics.lineWidth = this.debug ? 1 : 5;\n\n            graphics.moveTo(xc, yc);\n            \n            // Draw through N points\n            for(var N = 0; N < nodes.length; N++) {\n                \n                currentIndex = nodes[N];\n                nextIndex = N + 1 > nodes.length - 1 ? nodes[N - nodes.length + 1] : nodes[N + 1];\n                \n                xc = currentIndex.x + (nextIndex.x - currentIndex.x) * 0.5;\n                yc = currentIndex.y + (nextIndex.y - currentIndex.y) * 0.5;\n            \n                graphics.quadraticCurveTo(currentIndex.x, currentIndex.y, xc, yc);\n                \n            }\n\n            this.debug ? null : graphics.fill();\n            graphics.stroke();\n                        \n            graphics.lineWidth = 1;\n            graphics.lineCap = cc.Graphics.LineCap.ROUND;\n            graphics.lineJoin = cc.Graphics.LineJoin.ROUND;\n            graphics.strokeColor = cc.hexToColor('#a9a9a9');\n            graphics.fillColor = cc.hexToColor('#a9a9a9');\n            \n            // Draw through N points\n            for(var N = 0; N < nodes.length; N++) {\n                \n                // First anchor\n                currentIndex = nodes[N];\n                nextIndex = N + 1 > nodes.length - 1 ? nodes[N - nodes.length + 1] : nodes[N + 1];\n                \n                xc = currentIndex.x + (nextIndex.x - currentIndex.x) * 0.8;\n                yc = currentIndex.y + (nextIndex.y - currentIndex.y) * 0.8;\n                \n                graphics.moveTo(xc, yc);\n                \n                // Second anchor\n                currentIndex = nextIndex;\n                nextIndex = N + 2 > nodes.length - 1 ? nodes[N - nodes.length + 2] : nodes[N + 2]; \n                \n                xc = currentIndex.x + (nextIndex.x - currentIndex.x) * 0.2;\n                yc = currentIndex.y + (nextIndex.y - currentIndex.y) * 0.2;\n                \n                graphics.lineTo(xc, yc);\n                graphics.stroke();\n                \n                // First anchor\n                currentIndex = nodes[N];\n                nextIndex = N + 1 > nodes.length - 1 ? nodes[N - nodes.length + 1] : nodes[N + 1];\n                \n                xc = currentIndex.x + (nextIndex.x - currentIndex.x) * 0.8;\n                yc = currentIndex.y + (nextIndex.y - currentIndex.y) * 0.8;\n                \n                graphics.circle(xc, yc, 2);\n                graphics.fill();\n            \n                // Second anchor\n                currentIndex = nextIndex;\n                nextIndex = N + 2 > nodes.length - 1 ? nodes[N - nodes.length + 2] : nodes[N + 2]; \n                \n                xc = currentIndex.x + (nextIndex.x - currentIndex.x) * 0.2;\n                yc = currentIndex.y + (nextIndex.y - currentIndex.y) * 0.2;\n                \n                graphics.circle(xc, yc, 2);\n                graphics.fill();\n                \n            }\n\n        });\n        \n        for(var index = 0; index < ripples.length; index++) {\n        \n            var ripple = ripples[index];\n            \n            let fillColor = cc.hexToColor('#ffffff');\n            fillColor.a = ripple.fade * 255;\n            graphics.fillColor = fillColor;\n            \n            graphics.circle(ripple.x, ripple.y, ripple.reactivity);\n\n            graphics.fill();\n        }\n                    \n    }\n});\n"]}